import mariadb
import dbconnect
import traceback

# Creating a function that allow hackers to view their own exploits
def view_my_exploits(hacker_alias, hacker_id):
    # Connecting to the database and creating a cursor, checking to see if there is a successful database connection and whether the cursor was created
    conn = dbconnect.open_db_connection()
    cursor = dbconnect.create_db_cursor(conn)

    # If the connection to the database is successful but the cursor was not created, try to close the cursor and database connection, don't run the next lines of code
    if(conn == None or cursor == None):
        print("An error in the database has occured.")
        dbconnect.close_cursor(cursor)
        dbconnect.close_db_connection(conn)
        return
    # Using a try-except block to catch errors when a hacker tries to view their exploits
    try:
        # Getting all of the hacker's exploits from the database
        cursor.execute("SELECT e.id, h.alias, e.content, h.id FROM hackers h INNER JOIN exploits e ON e.hacker_id = h.id WHERE h.id = ?", [hacker_id,])
        my_exploits = cursor.fetchall()

        # If there are no exploits found, print a message to the hacker
        if(len(my_exploits) == 0):
            print("\nNo posts found.")
        # If there are more than one exploit found, print the exploit number, hacker's username, their exploit and id
        else:
            print("\nMy Exploits")
            print("-----------")
            for exploit in my_exploits:
                print(f"\nExploit #{exploit[0]} by @{exploit[1]}\n")
                print(f"{exploit[2]}\n")
                print(f"Hacker ID: {exploit[3]}\n")
                print("------------------------------")
    # If errors occurs during this process, raise the following exceptions, print an error message to the hacker and the traceback
    except mariadb.IntegrityError:
        # An IntegrityError is raised if there is any constraint failure such as a foreign key constraint failure
        print(f"\nErrors found in database due to foreign key contraint failure. Failed to retrieve @{hacker_alias}'s exploits.\n")
        traceback.print_exc()
    except mariadb.OperationalError:
        # An OptionalError exception is raised for things that are not in control of the programmer such as an unexpected connection failure, server hutting down, etc.
        print(f"\nOperational errors occured when retrieving @{hacker_alias}'s exploits.\n")
        traceback.print_exc()
    except mariadb.ProgrammingError:
        # A ProgrammingError exception is raised if there are errors made by the programmer such as incorrect SQL syntax, getting data from a table that is not found, etc. 
        print("\nInvalid SQL syntax.\n")
        traceback.print_exc()
    except mariadb.NotSupportedError:
        # A NotSupportedError exception is raised if a programmer writes code that is not supported by a certain method such as a MariaDB syntax error
        print("\nInvalid MariaDB syntax.\n")
        traceback.print_exc() 
    except mariadb.DatabaseError:
        # A DatabaseError exception is raised for all errors that are related to the database
        print(f"\nAn error has occured in the database. Failed to retrieve @{hacker_alias}'s exploits.\n")
        traceback.print_exc()
    except mariadb.InterfaceError:
        # An InterfaceError exception is raised if there are errors found in python or the database client
        print("\nAn interface error has occured. Please check the documentation for Python or the database client.\n")
        traceback.print_exc()
    except:
        # Catching all other errors
            print(f"\nAn error occured. Failed to retrieve @{hacker_alias}'s exploits.\n")
            traceback.print_exc()

    # Closing the cursor and the database connection
    closing_cursor = dbconnect.close_cursor(cursor)
    closing_db = dbconnect.close_db_connection(conn)

    # If the cursor or database connection failed to close, print an error message
    if(closing_cursor == False or closing_db == False):
        print("\nFailed to close cursor and database connection.")