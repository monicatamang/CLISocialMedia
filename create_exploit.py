import mariadb
import dbconnect
import traceback

# Creating a function that allow hackers post a new exploit
def enter_new_exploit(hacker_alias, hacker_id):
    # Connecting to the database and creating a cursor, checking to see if there is a successful database connection and whether the cursor was created
    conn = dbconnect.open_db_connection()
    cursor = dbconnect.create_db_cursor(conn)

    # If the connection to the database is successful but the cursor was not created, try to close the cursor and database connection, don't run the next lines of code
    if(conn == None or cursor == None):
        print("An error in the database has occured.")
        dbconnect.close_cursor(cursor)
        dbconnect.close_db_connection(conn)
        return

    # If a hacker submits an invalid entry, prompt the hacker to submit their entry again
    while(True):
        # Using a try-except block to catch errors when the hacker posts their exploit to the database
        try:
            print(f"\nNew Exploit by @{hacker_alias}")
            print("------------------------------ \n")

            # Prompting the hacker to write their new exploit
            exploit_content = input("Enter text here: \n\n")

            # If the hacker creates a new exploit without any content, print an error message to hacker and prompt them to enter a valid exploit
            if(exploit_content == ""):
                print("Invalid entry. Please re-enter your entry.")
            else:
                # If the hacker enters valid content in their exploit, store their exploit into the database, commit the changes
                cursor.execute("INSERT INTO exploits(content, hacker_id) VALUES(?, ?)", [exploit_content, hacker_id])
                conn.commit()

                # If the new exploit is successfully stored in the database, print a success message to the hacker
                if(cursor.rowcount == 1):
                    print(f"\n@{hacker_alias}'s exploit was successfully uploaded.")
                    break
                else:
                    # If the new exploit is not stored in the database, print an error message to the hacker
                    print(f"\nFailed to upload @{hacker_alias}'s exploit.")
        # If errors occur during this process, raise the following exceptions, print an error message to the hacker and the traceback
        except mariadb.DataError:
            # A DataError exception is raised if there are issues with processing data. In this case, the content of the exploit is set to have a maximum of 65,535 characters in length, if a hacker exceeds this limit, an error will occur
            print("\nInvalid data being passed to the database.\n")
            traceback.print_exc()
        except mariadb.OperationalError:
            # An OperationalError exception is raised for things that are not in control of the programmer such as an unexpected connection failure, server shutting down, etc.
            print(f"\nOperational errors occured when retrieving @{hacker_alias}'s exploits.\n")
            traceback.print_exc()
        except mariadb.ProgrammingError:
            # A ProgrammingError exception is raised if there are errors made by the programmer such as incorrect SQL syntax, getting data from a table that is not found, etc. 
            # In this case, a programming error can occur if the database is unable to recognize between metacharacters and literal strings causing an error to occur
            print(f"\nUnable to escape metacharacters in @{hacker_alias}'s exploit. Failed to upload @{hacker_alias}'s exploit to the database.\n")
            traceback.print_exc()
        except mariadb.NotSupportedError:
            # A NotSupportedError exception is raised if a programmer writes code that is not supported by a certain method such as a MariaDB syntax error
            print("\nInvalid MariaDB syntax.\n")
            traceback.print_exc()
        except mariadb.DatabaseError:
            # A DatabaseError exception is raised for all errors that are related to the database
            print(f"\nAn error in the database has occured. Failed to retrieve @{hacker_alias}'s exploits.\n")
            traceback.print_exc()
        except mariadb.InterfaceError:
            # An InterfaceError exception is raised if there are errors found in python or the database client
            print("An interface error has occured. Please check the documentation for Python or the database client.")
            traceback.print_exc()
        except:
            # Catching all other errors
            print(f"\nAn error occured. Failed to upload @{hacker_alias}'s exploit.\n")
            traceback.print_exc()

    # Closing the cursor and the database connection
    closing_cursor = dbconnect.close_cursor(cursor)
    closing_db = dbconnect.close_db_connection(conn)

    # If the cursor or database connection failed to close, print an error message
    if(closing_cursor == False or closing_db == False):
        print("\nFailed to close cursor and database connection.")